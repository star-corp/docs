{"remainingRequest":"/Users/jro_k/Documents/GitHub/packager/stardocs/node_modules/babel-loader/lib/index.js??ref--8-1!/Users/jro_k/Documents/GitHub/packager/stardocs/src/pages/index.js","dependencies":[{"path":"/Users/jro_k/Documents/GitHub/packager/stardocs/src/pages/index.js","mtime":1613609178832},{"path":"/Users/jro_k/Documents/GitHub/packager/stardocs/node_modules/cache-loader/dist/cjs.js","mtime":1613402050081},{"path":"/Users/jro_k/Documents/GitHub/packager/stardocs/node_modules/babel-loader/lib/index.js","mtime":1613402049931}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}