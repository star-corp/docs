import { Subject } from '../Subject';
import { Observable } from '../Observable';
import { Subscriber } from '../Subscriber';
import { Subscription } from '../Subscription';
/**
 * @class ConnectableObservable<T>
 * @deprecated To be removed in version 8. Please use {@link connectable} to create a connectable observable.
 * If you are using the `refCount` method of `ConnectableObservable` you can use the updated {@link share} operator
 * instead, which is now highly configurable.
 */
export declare class ConnectableObservable<T> extends Observable<T> {
    source: Observable<T>;
    protected subjectFactory: () => Subject<T>;
    protected _subject: Subject<T> | null;
    protected _refCount: number;
    protected _connection: Subscription | null;
    /**
     * @param source The source observable
     * @param subjectFactory The factory that creates the subject used internally.
     * @deprecated To be removed in version 8. Please use {@link connectable} to create a connectable observable.
     * If you are using the `refCount` method of `ConnectableObservable` you can use the {@link share} operator
     * instead, which is now highly configurable. `new ConnectableObservable(source, fn)` is equivalent
     * to `connectable(source, fn)`. With the exception of when the `refCount()` method is needed, in which
     * case, the new {@link share} operator should be used: `new ConnectableObservable(source, fn).refCount()`
     * is equivalent to `source.pipe(share({ connector: fn }))`.
     */
    constructor(source: Observable<T>, subjectFactory: () => Subject<T>);
    protected _subscribe(subscriber: Subscriber<T>): Subscription;
    protected getSubject(): Subject<T>;
    protected _teardown(): void;
    connect(): Subscription;
    /**
     * @deprecated The {@link ConnectableObservable} class is scheduled for removal in version 8.
     * Please use the {@link share} operator, which is now highly configurable.
     */
    refCount(): Observable<T>;
}
//# sourceMappingURL=ConnectableObservable.d.ts.map