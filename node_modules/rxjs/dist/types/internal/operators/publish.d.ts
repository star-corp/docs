import { Observable } from '../Observable';
import { ConnectableObservable } from '../observable/ConnectableObservable';
import { OperatorFunction, UnaryFunction, ObservableInput, ObservedValueOf } from '../types';
/**
 * Returns a connectable observable that, when connected, will multicast
 * all values through a single underlying {@link Subject} instance.
 *
 * @deprecated To be removed in version 8. If you're using `publish()` to get a connectable observable,
 * please use the new {@link connectable} creation function. `source.pipe(publish())` is
 * equivalent to `connectable(source, () => new Subject())`. If you're calling {@link refCount} on the result
 * of `publish`, please use the updated {@link share} operator which is highly configurable.
 * `source.pipe(publish(), refCount())` is equivalent to
 * `source.pipe(share({ resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.
 */
export declare function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;
/**
 * Returns an observable, that when subscribed to, creates an underlying {@link Subject},
 * provides an observable view of it to a `selector` function, takes the observable result of
 * that selector function and subscribes to it, sending its values to the consumer, _then_ connects
 * the subject to the original source.
 *
 * @param selector A function used to setup multicasting prior to automatic connection.
 *
 * @deprecated To be removed in version 8. Use the new {@link connect} operator.
 * If you're using `publish(fn)`, it is equivalent to `connect(fn)`.
 */
export declare function publish<T, O extends ObservableInput<any>>(selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;
//# sourceMappingURL=publish.d.ts.map